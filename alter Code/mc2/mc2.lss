
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000085  00800060  00800060  00000250  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000226  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  000004ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000021f  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000109  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 3e       	cpi	r26, 0xE5	; 229
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
// *************************************************************************
// Function: UART Receive Complete interrupt
// Purpose:  called when the UART has received a character
// **************************************************************************
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    // read UART status register and UART data register
    usr  = UART0_STATUS;
  8e:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  90:	9c b1       	in	r25, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    // calculate buffer index 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  92:	e0 91 e2 00 	lds	r30, 0x00E2
  96:	ef 5f       	subi	r30, 0xFF	; 255
  98:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
  9a:	80 91 e3 00 	lds	r24, 0x00E3
  9e:	e8 17       	cp	r30, r24
  a0:	31 f0       	breq	.+12     	; 0xae <__vector_11+0x32>
        // error: receive buffer overflow
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        // store new index 
        UART_RxHead = tmphead;
  a2:	e0 93 e2 00 	sts	0x00E2, r30
        // store received data in buffer 
        UART_RxBuf[tmphead] = data;
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	e0 56       	subi	r30, 0x60	; 96
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	90 83       	st	Z, r25
    }
    UART_LastRxError |= lastRxError;   
  ae:	80 91 e4 00 	lds	r24, 0x00E4
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 93 e4 00 	sts	0x00E4, r24
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
// *************************************************************************
// Function: UART Data Register Empty interrupt
// Purpose:  called when the UART is ready to transmit the next byte
// **************************************************************************
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  dc:	90 91 e0 00 	lds	r25, 0x00E0
  e0:	80 91 e1 00 	lds	r24, 0x00E1
  e4:	98 17       	cp	r25, r24
  e6:	61 f0       	breq	.+24     	; 0x100 <__vector_12+0x36>
        // calculate and store new buffer index
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  e8:	e0 91 e1 00 	lds	r30, 0x00E1
  ec:	ef 5f       	subi	r30, 0xFF	; 255
  ee:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
  f0:	e0 93 e1 00 	sts	0x00E1, r30
        // get one byte from buffer and write it to UART
        UART0_DATA = UART_TxBuf[tmptail];  // start transmission
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	8c b9       	out	0x0c, r24	; 12
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__vector_12+0x38>
    }else{
        // tx buffer empty, disable UDRE interrupt
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 100:	55 98       	cbi	0x0a, 5	; 10
    }
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 114:	90 91 e2 00 	lds	r25, 0x00E2
 118:	80 91 e3 00 	lds	r24, 0x00E3
 11c:	98 17       	cp	r25, r24
 11e:	19 f4       	brne	.+6      	; 0x126 <uart_getc+0x12>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	31 e0       	ldi	r19, 0x01	; 1
 124:	10 c0       	rjmp	.+32     	; 0x146 <uart_getc+0x32>
        return UART_NO_DATA;   // no data available
    }
    
    // calculate /store buffer index
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 126:	e0 91 e3 00 	lds	r30, 0x00E3
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
 12e:	e0 93 e3 00 	sts	0x00E3, r30
    
    // get data from receive buffer
    data = UART_RxBuf[tmptail];
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e0 56       	subi	r30, 0x60	; 96
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 13a:	90 91 e4 00 	lds	r25, 0x00E4
    UART_LastRxError = 0;
 13e:	10 92 e4 00 	sts	0x00E4, r1
    return data;
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0

}// uart_getc
 146:	c9 01       	movw	r24, r18
 148:	08 95       	ret

0000014a <uart_putc>:
// Purpose:  write byte to ringbuffer for transmitting via UART
// Input:    byte to be transmitted
// Returns:  none          
// **************************************************************************
void uart_putc(unsigned char data)
{
 14a:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 14c:	90 91 e0 00 	lds	r25, 0x00E0
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	9f 73       	andi	r25, 0x3F	; 63
    
    while ( tmphead == UART_TxTail ){
 154:	80 91 e1 00 	lds	r24, 0x00E1
 158:	98 17       	cp	r25, r24
 15a:	e1 f3       	breq	.-8      	; 0x154 <uart_putc+0xa>
        ;// wait for free space in buffer
    }
    
    UART_TxBuf[tmphead] = data;
 15c:	e9 2f       	mov	r30, r25
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 166:	90 93 e0 00 	sts	0x00E0, r25

    // enable UDRE interrupt
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 16a:	55 9a       	sbi	0x0a, 5	; 10

}// uart_putc
 16c:	08 95       	ret

0000016e <main>:

int main(void)
{   
    DIR_DATA = STD_DIR_DATA;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a bb       	out	0x1a, r24	; 26
	PORT_DATA = STD_PORT_DATA;
 172:	1b ba       	out	0x1b, r1	; 27
	DIR_CTRL = STD_DIR_CTRL;
 174:	8d ef       	ldi	r24, 0xFD	; 253
 176:	84 bb       	out	0x14, r24	; 20
	PORT_CTRL = STD_PORT_CTRL;
 178:	15 ba       	out	0x15, r1	; 21
	int baudrate = ( ((((F_CPU) + 4UL * (UART_BAUD_RATE)) / (8UL * (UART_BAUD_RATE)) -1UL)) | 0x8000); //double speed
	//int baudrate = (((F_CPU) + 8UL * (UART_BAUD_RATE)) / (16UL * (UART_BAUD_RATE)) -1UL); //single speed
	
    if ( baudrate & 0x8000 )
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
    }
    UBRRH = (unsigned char)(baudrate>>8);
 17e:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) baudrate;
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	89 b9       	out	0x09, r24	; 9
   
    // Enable USART receiver and transmitter and receive complete interrupt
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 184:	88 e9       	ldi	r24, 0x98	; 152
 186:	8a b9       	out	0x0a, r24	; 10
    
    // Set frame format: asynchronous, 8data, no parity, 1stop bit
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 188:	86 e8       	ldi	r24, 0x86	; 134
 18a:	80 bd       	out	0x20, r24	; 32
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
	
	sei();
 18c:	78 94       	sei
	unsigned char tmptail;
	unsigned char data;
		
	data = 0x00;
	
	PORT_CTRL &= ~PIN_Z;
 18e:	a8 98       	cbi	0x15, 0	; 21
        }*/

	
		
		//aus getc:
		if(UART_RxHead != UART_RxTail){ //Daten vorhanden
 190:	90 91 e2 00 	lds	r25, 0x00E2
 194:	80 91 e3 00 	lds	r24, 0x00E3
 198:	98 17       	cp	r25, r24
 19a:	d1 f3       	breq	.-12     	; 0x190 <main+0x22>
			// calculate /store buffer index
			tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 19c:	e0 91 e3 00 	lds	r30, 0x00E3
 1a0:	ef 5f       	subi	r30, 0xFF	; 255
 1a2:	ef 73       	andi	r30, 0x3F	; 63
			UART_RxTail = tmptail; 
 1a4:	e0 93 e3 00 	sts	0x00E3, r30
			
			// get data from receive buffer
			data = UART_RxBuf[tmptail];
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e0 56       	subi	r30, 0x60	; 96
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 81       	ld	r24, Z
			
			if ( UART_LastRxError & UART_FRAME_ERROR ){
 1b0:	90 91 e4 00 	lds	r25, 0x00E4
				//uart_puts_P("UART Frame Error: ");
			}else if ( UART_LastRxError & UART_OVERRUN_ERROR ){
 1b4:	90 91 e4 00 	lds	r25, 0x00E4
				//uart_puts_P("UART Overrun Error: ");
			}else if ( UART_LastRxError & UART_BUFFER_OVERFLOW ){
 1b8:	90 91 e4 00 	lds	r25, 0x00E4
				//uart_puts_P("Buffer overflow error: ");
			}
			
			if(data == 0x00){
 1bc:	88 23       	and	r24, r24
 1be:	11 f4       	brne	.+4      	; 0x1c4 <main+0x56>
				PORT_CTRL |= PIN_Z;
 1c0:	a8 9a       	sbi	0x15, 0	; 21
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <main+0x58>
			}else{
				PORT_DATA = data;
 1c4:	8b bb       	out	0x1b, r24	; 27
			}
			
			while((PIN_CTRL & PIN_E) == 0x00){ 
 1c6:	99 9b       	sbis	0x13, 1	; 19
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <main+0x58>
				//Warten bis E=1
			}
			
			PORT_DATA = 0x00;
 1ca:	1b ba       	out	0x1b, r1	; 27
			PORT_CTRL &= ~PIN_Z;
 1cc:	a8 98       	cbi	0x15, 0	; 21
			
			while((PIN_CTRL & PIN_E) != 0x00){
 1ce:	99 99       	sbic	0x13, 1	; 19
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <main+0x60>
				//Warten bis E=0
			}
				
			//Zurueckschreiben;
			uart_putc(data);
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <uart_putc>
 1d6:	dc cf       	rjmp	.-72     	; 0x190 <main+0x22>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
